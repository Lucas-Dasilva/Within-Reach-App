"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.style = void 0;
const avatars_1 = require("@dicebear/avatars");
const color_1 = __importDefault(require("@dicebear/avatars/lib/color"));
const schema_1 = require("./schema");
const eyes_1 = __importDefault(require("./eyes"));
const face_1 = __importDefault(require("./face"));
const mouth_1 = __importDefault(require("./mouth"));
const sides_1 = __importDefault(require("./sides"));
const texture_1 = __importDefault(require("./texture"));
const top_1 = __importDefault(require("./top"));
const group = (prng, content, chance, x, y) => {
    if (prng.bool(chance)) {
        return `<g transform="translate(${x}, ${y})">${content}</g>`;
    }
    return '';
};
exports.style = {
    meta: {
        title: 'Bottts',
        creator: 'Pablo Stanley',
        contributor: 'Florian KÃ¶rner',
        source: 'https://bottts.com/',
        license: {
            name: 'Other - Free for personal and commercial use',
            url: 'https://bottts.com/',
        },
    },
    schema: schema_1.schema,
    create: ({ prng, options }) => {
        let defaults = avatars_1.utils.schema.defaults(schema_1.schema);
        let colorsCollection = [];
        Object.keys(color_1.default.collection).forEach((color) => {
            if (options.colors === undefined ||
                options.colors.length === 0 ||
                options.colors.indexOf(color) !== -1) {
                colorsCollection.push(color_1.default.collection[color]);
            }
        });
        let primaryColorCollection = prng.pick(colorsCollection);
        let secondaryColorCollection = prng.pick(colorsCollection);
        let primaryColor = new color_1.default(primaryColorCollection[options.primaryColorLevel || defaults.primaryColorLevel]);
        let secondaryColor = new color_1.default(primaryColorCollection[options.secondaryColorLevel || defaults.secondaryColorLevel]);
        if (options.colorful) {
            secondaryColor = new color_1.default(secondaryColorCollection[options.secondaryColorLevel || defaults.secondaryColorLevel]);
        }
        let eyes = prng.pick(eyes_1.default);
        let face = prng.pick(face_1.default);
        let mouth = prng.pick(mouth_1.default);
        let sides = prng.pick(sides_1.default);
        let texture = prng.pick(texture_1.default);
        let top = prng.pick(top_1.default);
        // prettier-ignore
        let body = [
            group(prng, sides(secondaryColor), options.sidesChance || defaults.sidesChance, 0, 66),
            group(prng, top(secondaryColor), options.topChance || defaults.topChance, 41, 0),
            group(prng, face(primaryColor, prng.bool(options.textureChance) ? texture() : undefined), 100, 25, 44),
            group(prng, mouth(), options.mouthChance || defaults.mouthChance, 52, 124),
            group(prng, eyes(), 100, 38, 76),
        ].join('');
        return {
            attributes: {
                viewBox: '0 0 180 180',
            },
            body,
        };
    },
};
