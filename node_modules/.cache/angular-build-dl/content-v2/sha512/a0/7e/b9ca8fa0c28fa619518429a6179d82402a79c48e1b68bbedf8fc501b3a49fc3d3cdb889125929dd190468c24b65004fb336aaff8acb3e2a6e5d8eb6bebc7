{"version":3,"sources":["webpack:///src/app/pages/home/home.page.html","webpack:///src/app/pages/home/home-routing.module.ts","webpack:///src/app/pages/home/home.module.ts","webpack:///src/app/pages/home/home.page.scss","webpack:///src/app/pages/home/home.page.ts"],"names":["routes","path","component","HomePageRoutingModule","imports","forChild","exports","HomePageModule","declarations","HomePage","location","getData","modalCtrl","postData","nav","router","user","stopPolling","refresh$","userInfo","getCoords","user_id","uuid","userLat","currentLocation","latitude","userLon","longitude","user$","pipe","_","getUser","posts$","getPosts","navigateRoot","next","$event","setTimeout","target","complete","event","value","getPostsSorted","create","postModal","present","onDidDismiss","then","data","undefined","createPostRequest","postBod","post_id","navigationExtras","queryParams","JSON","stringify","navigate","selector","template"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKf,UAAMA,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE;AAFb,OADqB,CAAvB;;UAYaC,qBAAqB;AAAA;AAAA,O;;AAArBA,2BAAqB,6DALjC,+DAAS;AACRC,eAAO,EAAE,CAAC,6DAAaC,QAAb,CAAsBL,MAAtB,CAAD,CADD;AAGRM,eAAO,EAAE,CAAC,4DAAD;AAHD,OAAT,CAKiC,GAArBH,qBAAqB,CAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCIAI,cAAc;AAAA;AAAA,O;;AAAdA,oBAAc,6DAV1B,+DAAS;AACRH,eAAO,EAAE,CACP,4DADO,EAEP,0DAFO,EAGP,0DAHO,EAIP,0EAJO,EAKP,yEALO,CADD;AAQRI,oBAAY,EAAE,CAAC,mDAAD;AARN,OAAT,CAU0B,GAAdD,cAAc,CAAd;;;;;;;;;;;;;;;;ACrBb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCoBFE,QAAQ;AACnB;AACA,0BAAoBC,QAApB,EAAuDC,OAAvD,EAAwFC,SAAxF,EAA4HC,QAA5H,EAA+JC,GAA/J,EAA2LC,MAA3L,EAAmNC,IAAnN,EAAoO;AAAA;;AAAhN,eAAAN,QAAA,GAAAA,QAAA;AAAmC,eAAAC,OAAA,GAAAA,OAAA;AAAiC,eAAAC,SAAA,GAAAA,SAAA;AAAoC,eAAAC,QAAA,GAAAA,QAAA;AAAmC,eAAAC,GAAA,GAAAA,GAAA;AAA4B,eAAAC,MAAA,GAAAA,MAAA;AAAwB,eAAAC,IAAA,GAAAA,IAAA;AAE3M,eAAAC,WAAA,GAAc,IAAI,4CAAJ,EAAd;AAER,eAAAC,QAAA,GAAW,IAAI,oDAAJ,CAA6B,IAA7B,CAAX;AAJuO,SAFpN,CAgBnB;;;AAhBmB;AAAA;AAAA,iBAiBb,oBAAW;;;;;;;;;;AAIb,6BAAM,KAAKF,IAAL,CAAUG,QAAV,EAAN;;;;AAEA,6BAAM,KAAKT,QAAL,CAAcU,SAAd,EAAN;;;AACA,2BAAKC,OAAL,GAAe,KAAKL,IAAL,CAAUM,IAAzB;AACA,2BAAKC,OAAL,GAAe,KAAKb,QAAL,CAAcc,eAAd,CAA8BC,QAA7C;AACA,2BAAKC,OAAL,GAAe,KAAKhB,QAAL,CAAcc,eAAd,CAA8BG,SAA7C,C,CAEA;AAEA;;AACA,2BAAKC,KAAL,GAAa,KAAKV,QAAL,CAAcW,IAAd,CAAmB,iEAAU,UAAAC,CAAC;AAAA,+BAAI,KAAI,CAACnB,OAAL,CAAaoB,OAAb,CAAqB,KAAI,CAACf,IAAL,CAAUM,IAA/B,CAAJ;AAAA,uBAAX,CAAnB,CAAb,C,CAEA;;AACA,2BAAKU,MAAL,GAAc,KAAKd,QAAL,CAAcW,IAAd,CAAmB,iEAAU,UAAAC,CAAC;AAAA,+BAAI,KAAI,CAACnB,OAAL,CAAasB,QAAb,CAAsB,KAAI,CAACV,OAA3B,EAAmC,KAAI,CAACG,OAAxC,EAAiD,KAAI,CAACV,IAAL,CAAUM,IAA3D,CAAJ;AAAA,uBAAX,CAAnB,CAAd,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAGA,2BAAKR,GAAL,CAASoB,YAAT,CAAsB,OAAtB;;;;;;;;;AAEH,WAhDkB,CAkDnB;;AAlDmB;AAAA;AAAA,iBAmDnB,4BAAgB;AACd,iBAAKhB,QAAL,CAAciB,IAAd,CAAmB,IAAnB;AACD;AArDkB;AAAA;AAAA,iBAsDb,mBAAUC,MAAV,EAAuB;;;;;;;;AAC3B;AACAC,gCAAU,CAAC,YAAM;AACf,8BAAI,CAACnB,QAAL,CAAciB,IAAd,CAAmB,IAAnB;;AACAC,8BAAM,CAACE,MAAP,CAAcC,QAAd;AACD,uBAHS,EAGP,IAHO,CAAV;;;;;;;;;AAID,WA5DkB,CA6DnB;;AA7DmB;AAAA;AAAA,iBA8DnB,mBAAUC,KAAV,EAAmB;AAAA;;AACjB;AACA,gBAAGA,KAAK,CAACF,MAAN,CAAaG,KAAb,IAAsB,KAAzB,EAA+B;AAC7B,mBAAKT,MAAL,GAAc,KAAKd,QAAL,CAAcW,IAAd,CAAmB,iEAAU,UAAAC,CAAC;AAAA,uBAAI,MAAI,CAACnB,OAAL,CAAa+B,cAAb,CAA4B,MAAI,CAACnB,OAAjC,EAAyC,MAAI,CAACG,OAA9C,EAAuD,MAAI,CAACL,OAA5D,CAAJ;AAAA,eAAX,CAAnB,CAAd;AACD,aAFD,CAGA;AAHA,iBAIK,IAAImB,KAAK,CAACF,MAAN,CAAaG,KAAb,IAAsB,KAA1B,EAAgC;AACnC,qBAAKT,MAAL,GAAc,KAAKd,QAAL,CAAcW,IAAd,CAAmB,iEAAU,UAAAC,CAAC;AAAA,yBAAI,MAAI,CAACnB,OAAL,CAAasB,QAAb,CAAsB,MAAI,CAACV,OAA3B,EAAmC,MAAI,CAACG,OAAxC,EAAiD,MAAI,CAACL,OAAtD,CAAJ;AAAA,iBAAX,CAAnB,CAAd;AACD;AACF,WAvEkB,CAyEnB;;AAzEmB;AAAA;AAAA,iBA0Eb,sBAAU;;;;;;;;;;AACE,6BAAM,KAAKT,SAAL,CAAe+B,MAAf,CAAsB;AAC1CzC,iCAAS,EAAE;AAD+B,uBAAtB,CAAN;;;AAAZ0C,+B;;AAGJ,6BAAMA,SAAS,CAACC,OAAV,EAAN;;;AACAD,+BAAS,CAACE,YAAV,GACCC,IADD,CACO,UAACC,IAAD,EAAS;AACd;AACA,4BAAGA,IAAI,CAACA,IAAL,IAAaC,SAAhB,EAA0B;AACxB;AACA,gCAAI,CAAC1B,OAAL,GAAe,MAAI,CAACb,QAAL,CAAcc,eAAd,CAA8BC,QAA7C;AACA,gCAAI,CAACC,OAAL,GAAe,MAAI,CAAChB,QAAL,CAAcc,eAAd,CAA8BG,SAA7C;;AACA,gCAAI,CAACd,QAAL,CAAcqC,iBAAd,CAAgC,MAAI,CAAC3B,OAArC,EAA8C,MAAI,CAACG,OAAnD,EAA4D,MAAI,CAACL,OAAjE,EAA0E2B,IAAI,CAACA,IAAL,CAAUG,OAApF,EAA6FJ,IAA7F,CAAkG,YAAK;AACvG,kCAAI,CAAC7B,QAAL,CAAciB,IAAd,CAAmB,IAAnB;AACC,2BAFD;AAGD;AACF,uBAXD;;;;;;;;;AAYD,WA3FkB,CA6FnB;;AA7FmB;AAAA;AAAA,iBA8FnB,uBAAciB,OAAd,EAA4B;AAC1B,gBAAIC,gBAAgB,GAAqB;AACvCC,yBAAW,EAAE;AACXF,uBAAO,EAAEG,IAAI,CAACC,SAAL,CAAeJ,OAAf;AADE;AAD0B,aAAzC;AAKA,iBAAKrC,MAAL,CAAY0C,QAAZ,CAAqB,CAAC,UAAD,CAArB,EAAmCJ,gBAAnC;AACD;AArGkB;AAAA;AAAA,iBAsGnB,uBAAc;AACZ,iBAAKpC,WAAL,CAAiBkB,IAAjB;AACF;AAxGmB;;AAAA;AAAA,S;;;;gBATZ;;gBARA;;gBADA;;gBAEA;;gBAFiB;;gBADC;;gBAMlB;;;;AAaI1B,cAAQ,6DALpB,gEAAU;AACTiD,gBAAQ,EAAE,UADD;AAETC,gBAAQ,EAAR;AAAA;AAAA,gGAFS;;;;AAAA,OAAV,CAKoB,GAARlD,QAAQ,CAAR","file":"pages-home-home-module-es5.js","sourcesContent":["export default \"<ion-header [translucent]=\\\"true\\\">\\r\\n  <ion-toolbar mode=\\\"ios\\\">\\r\\n\\r\\n    <ion-chip *ngIf=\\\"user$ |async as user\\\" lines =\\\"none\\\" slot=\\\"start\\\">\\r\\n      <ion-label>{{user.karma}}</ion-label>\\r\\n    </ion-chip>\\r\\n    <!-- Sorting -->\\r\\n    <ion-segment mode=\\\"ios\\\" value=\\\"new\\\" (ionChange)=\\\"sortPosts($event)\\\">\\r\\n      <ion-segment-button value=\\\"new\\\">\\r\\n        <ion-label>New</ion-label>\\r\\n      </ion-segment-button>\\r\\n      <ion-segment-button value=\\\"hot\\\">\\r\\n        <ion-label>Hot</ion-label>\\r\\n      </ion-segment-button>\\r\\n    </ion-segment>\\r\\n\\r\\n    <!-- Create post -->\\r\\n    <ion-buttons slot=\\\"end\\\">\\r\\n      <ion-button (click)=\\\"createPost()\\\">\\r\\n        <ion-icon name=\\\"create-outline\\\"></ion-icon> \\r\\n      </ion-button>\\r\\n    </ion-buttons>\\r\\n\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n\\r\\n  <!-- Pulldown to refresh -->\\r\\n  <ion-refresher slot=\\\"fixed\\\" (ionRefresh)=\\\"doRefresh($event)\\\">\\r\\n    <ion-refresher-content\\r\\n      pullingIcon=\\\"circular\\\"\\r\\n    >\\r\\n    </ion-refresher-content>\\r\\n  </ion-refresher>\\r\\n  <!-- Create Post list -->\\r\\n  <ion-list mode=\\\"ios\\\" *ngIf=\\\"posts$ | async as posts\\\">\\r\\n    <!-- Start of forloop -->\\r\\n    <ion-card *ngFor=\\\"let post of posts.post_list\\\">\\r\\n      <!-- Start of row -->\\r\\n      <ion-row>\\r\\n        <!-- post body Column -->\\r\\n        <ion-col class=\\\"body\\\" (click)=\\\"gotToComments(post.id)\\\">\\r\\n          {{post.body}}\\r\\n        </ion-col>\\r\\n        <!-- Vote Column -->\\r\\n        <ion-col class = \\\"vote\\\" size=\\\"2\\\">\\r\\n          <app-vote-button [reactions] =\\\"posts.react_list\\\" [post_id]=\\\"post.id\\\" [post_user]=\\\"post.user_id\\\" [likes]=\\\"post.likes\\\"></app-vote-button>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n      <!-- Start of bottom row -->\\r\\n      <ion-footer mode=\\\"ios\\\">\\r\\n        <ion-grid>\\r\\n          <ion-row>\\r\\n            <!-- time column -->\\r\\n            <ion-col size=\\\"4\\\" class=\\\"time\\\">\\r\\n              <ion-icon name=\\\"time-outline\\\"></ion-icon>\\r\\n              {{ post.timestamp | datepipe }}\\r\\n            </ion-col>\\r\\n              <!-- If reply counter is 0 -->\\r\\n              <ion-col *ngIf=\\\"post.reply_count == 0\\\" size=\\\"4\\\" class=\\\"reply\\\" (click)=\\\"gotToComments(post.id)\\\">\\r\\n                <ion-icon name=\\\"chatbubble-outline\\\"></ion-icon>              \\r\\n                <div class=\\\"text\\\">none</div>\\r\\n              </ion-col>\\r\\n              <!-- If reply counter is 1 -->\\r\\n              <ion-col *ngIf=\\\"post.reply_count == 1\\\" size=\\\"4\\\" class=\\\"reply\\\" (click)=\\\"gotToComments(post.id)\\\">\\r\\n                <ion-icon name=\\\"chatbubble-outline\\\"></ion-icon>              \\r\\n                <div class=\\\"text\\\">1 reply</div>\\r\\n              </ion-col>\\r\\n              <!-- If reply counter is greater than 1 -->\\r\\n              <ion-col *ngIf=\\\"post.reply_count > 1\\\" size=\\\"4\\\" class=\\\"reply\\\" (click)=\\\"gotToComments(post.id)\\\">\\r\\n                <ion-icon name=\\\"chatbubbles-outline\\\"></ion-icon>              \\r\\n                <div class=\\\"text\\\">{{post.reply_count}} replies</div>\\r\\n              </ion-col>\\r\\n            <!-- Distance column -->\\r\\n            <ion-col size=\\\"4\\\" class=\\\"distance\\\">\\r\\n              <div class=\\\"text\\\"> {{ post.distance }} miles</div>\\r\\n            </ion-col>\\r\\n          </ion-row>\\r\\n        </ion-grid>\\r\\n      </ion-footer>\\r\\n    </ion-card>\\r\\n  </ion-list>\\r\\n\\r\\n  \\r\\n<!-- <ion-tabs>\\r\\n  <ion-tab-bar slot=\\\"bottom\\\">\\r\\n\\r\\n    <ion-tab-button tab=\\\"about\\\">\\r\\n      <ion-icon name=\\\"person-circle-outline\\\"></ion-icon>\\r\\n      <ion-label>Me</ion-label>\\r\\n    </ion-tab-button>\\r\\n    <ion-tab-button tab=\\\"home\\\">\\r\\n      <ion-icon name=\\\"home\\\"></ion-icon>\\r\\n      <ion-label>Home</ion-label>\\r\\n    </ion-tab-button>\\r\\n    <ion-tab-button tab=\\\"more\\\">\\r\\n      <ion-icon name=\\\"ellipsis-horizontal-outline\\\"></ion-icon>      \\r\\n      <ion-label>More</ion-label>\\r\\n    </ion-tab-button>\\r\\n  </ion-tab-bar>\\r\\n</ion-tabs> -->\\r\\n  \\r\\n</ion-content>\\r\\n\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { HomePage } from './home.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: HomePage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)\r\n],\r\n  exports: [RouterModule],\r\n})\r\nexport class HomePageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { HomePageRoutingModule } from './home-routing.module';\r\n\r\nimport { HomePage } from './home.page';\r\n\r\nimport { ComponentsModule } from 'src/app/component.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    HomePageRoutingModule,\r\n    ComponentsModule\r\n  ],\r\n  declarations: [HomePage],\r\n})\r\nexport class HomePageModule {}\r\n","export default \"ion-footer {\\n  display: inline;\\n  margin: auto;\\n}\\n\\nion-refresher {\\n  --color:#5600F7;\\n}\\n\\nion-chip {\\n  --background: #ffffff;\\n  --color: #5600F7;\\n}\\n\\nion-label {\\n  font-weight: bold;\\n}\\n\\nion-button {\\n  --color: #5600F7;\\n}\\n\\nion-icon {\\n  vertical-align: middle;\\n  padding-bottom: 3.5px;\\n}\\n\\n.time {\\n  font-size: 13px;\\n  padding-top: 1em;\\n  padding-left: 4px;\\n  color: #7972da;\\n}\\n\\n.distance {\\n  display: flex;\\n  font-size: 13px;\\n  justify-content: flex-end;\\n  margin: auto;\\n  padding-top: 1em;\\n  padding-right: 4px;\\n  color: #7972da;\\n}\\n\\n.vote {\\n  display: flex;\\n  padding-bottom: 0em;\\n  align-items: center;\\n}\\n\\n.reply {\\n  display: flex;\\n  font-size: 13px;\\n  justify-content: center;\\n  padding-top: 1em;\\n  display: flex;\\n}\\n\\n.text {\\n  margin-left: 0.5em;\\n}\\n\\n.body {\\n  padding: 1em;\\n}\\n\\n@media (prefers-color-scheme: light) {\\n  ion-card {\\n    box-shadow: 5px 5px 15px 5px rgba(170, 170, 170, 0.41);\\n    --color: #5F656D;\\n  }\\n}\\n\\n@media (prefers-color-scheme: dark) {\\n  ion-card {\\n    box-shadow: 2px 2px 17px 4px rgba(0, 0, 0, 0.41);\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvaG9tZS9ob21lLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGVBQUE7RUFDQSxZQUFBO0FBQ0Y7O0FBQ0E7RUFDRSxlQUFBO0FBRUY7O0FBQUE7RUFDRSxxQkFBQTtFQUNBLGdCQUFBO0FBR0Y7O0FBREE7RUFDRSxpQkFBQTtBQUlGOztBQUZBO0VBQ0UsZ0JBQUE7QUFLRjs7QUFIQTtFQUNFLHNCQUFBO0VBQ0EscUJBQUE7QUFNRjs7QUFKQTtFQUNFLGVBQUE7RUFDQSxnQkFBQTtFQUNBLGlCQUFBO0VBQ0EsY0FBQTtBQU9GOztBQUxBO0VBQ0UsYUFBQTtFQUNBLGVBQUE7RUFDQSx5QkFBQTtFQUNBLFlBQUE7RUFDQSxnQkFBQTtFQUNBLGtCQUFBO0VBQ0EsY0FBQTtBQVFGOztBQU5BO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsbUJBQUE7QUFTRjs7QUFQQTtFQUNFLGFBQUE7RUFDQSxlQUFBO0VBQ0EsdUJBQUE7RUFDQSxnQkFBQTtFQUNBLGFBQUE7QUFVRjs7QUFSQTtFQUNFLGtCQUFBO0FBV0Y7O0FBUkE7RUFDRSxZQUFBO0FBV0Y7O0FBVEE7RUFDRTtJQUVFLHNEQUFBO0lBQ0EsZ0JBQUE7RUFZRjtBQUNGOztBQVRBO0VBQ0U7SUFFRSxnREFBQTtFQVdGO0FBQ0YiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9ob21lL2hvbWUucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLWZvb3RlcntcclxuICBkaXNwbGF5OiBpbmxpbmU7IFxyXG4gIG1hcmdpbjphdXRvO1xyXG59XHJcbmlvbi1yZWZyZXNoZXIge1xyXG4gIC0tY29sb3I6IzU2MDBGNztcclxufVxyXG5pb24tY2hpcCB7XHJcbiAgLS1iYWNrZ3JvdW5kOiAjZmZmZmZmO1xyXG4gIC0tY29sb3I6ICM1NjAwRjc7XHJcbn1cclxuaW9uLWxhYmVse1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbmlvbi1idXR0b257XHJcbiAgLS1jb2xvcjogICM1NjAwRjc7XHJcbn1cclxuaW9uLWljb24ge1xyXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgcGFkZGluZy1ib3R0b206IDMuNXB4O1xyXG59XHJcbi50aW1le1xyXG4gIGZvbnQtc2l6ZTogMTNweDtcclxuICBwYWRkaW5nLXRvcDogMWVtO1xyXG4gIHBhZGRpbmctbGVmdDogNHB4O1xyXG4gIGNvbG9yOiAjNzk3MmRhO1xyXG59XHJcbi5kaXN0YW5jZXtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZvbnQtc2l6ZTogMTNweDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xyXG4gIG1hcmdpbjphdXRvO1xyXG4gIHBhZGRpbmctdG9wOiAxZW07XHJcbiAgcGFkZGluZy1yaWdodDogNHB4O1xyXG4gIGNvbG9yOiAjNzk3MmRhO1xyXG59XHJcbi52b3Rle1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgcGFkZGluZy1ib3R0b206IDBlbTtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG59XHJcbi5yZXBseXtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZvbnQtc2l6ZTogMTNweDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICBwYWRkaW5nLXRvcDogMWVtO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbn1cclxuLnRleHR7XHJcbiAgbWFyZ2luLWxlZnQ6IC41ZW07XHJcbn1cclxuXHJcbi5ib2R5e1xyXG4gIHBhZGRpbmc6IDFlbTtcclxufVxyXG5AbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBsaWdodCkge1xyXG4gIGlvbi1jYXJkIHtcclxuICAgIC13ZWJraXQtYm94LXNoYWRvdzogNXB4IDVweCAxNXB4IDVweCByZ2JhKDE3MCwxNzAsMTcwLDAuNDEpOyBcclxuICAgIGJveC1zaGFkb3c6IDVweCA1cHggMTVweCA1cHggcmdiYSgxNzAsMTcwLDE3MCwwLjQxKTtcclxuICAgIC0tY29sb3I6ICM1RjY1NkQ7XHJcbiAgfVxyXG4gIFxyXG59XHJcbkBtZWRpYSAocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspIHtcclxuICBpb24tY2FyZCB7XHJcbiAgICAtd2Via2l0LWJveC1zaGFkb3c6IDJweCAycHggMTdweCA0cHggcmdiYSgwLDAsMCwwLjQxKTsgXHJcbiAgICBib3gtc2hhZG93OiAycHggMnB4IDE3cHggNHB4IHJnYmEoMCwwLDAsMC40MSk7XHJcbiAgfVxyXG59Il19 */\";","import { Component, OnInit } from '@angular/core';\r\nimport { NavigationExtras, Router } from '@angular/router';\r\nimport { ModalController, NavController } from '@ionic/angular';\r\nimport { GetDataService } from 'src/app/services/get-data.service'\r\nimport { PostDataService } from 'src/app/services/post-data.service';\r\nimport { IPost } from 'src/app/models/postModel';\r\nimport { IReact } from 'src/app/models/reactModel';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { CreatePostPage } from '../create-post/create-post.page';\r\nimport { BehaviorSubject, forkJoin, Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { LocationService } from 'src/app/services/location.service';\r\nimport { IUser } from 'src/app/models/userModel';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.page.html',\r\n  styleUrls: ['./home.page.scss'],\r\n})\r\nexport class HomePage implements OnInit {\r\n  // Called first time before the ngOnInit()\r\n  constructor(private location: LocationService, private getData: GetDataService, private modalCtrl: ModalController, private postData: PostDataService, private nav: NavController, private router: Router, private user: UserService){}\r\n\r\n  private stopPolling = new Subject();\r\n  posts$: Observable<{post_list: IPost[], react_list: IReact[]}>;\r\n  refresh$ = new BehaviorSubject<boolean>(true);\r\n  user$: Observable<IUser[]>;\r\n  reply_count: Observable<number>;\r\n  public user_id: string;\r\n  public user_karma: number;\r\n  public reactions: IReact[];\r\n  public userLat: number;\r\n  public userLon: number;\r\n\r\n\r\n  // Called after the constructor and called  after the first ngOnChanges() \r\n  async ngOnInit() {   \r\n    //We want to compare the uuid with the user_id in the server. If they match then they can enter the page\r\n    //This checks if the uuid was actually saved in the database when user pressed \"Continue\" in location page\r\n    try{\r\n      await this.user.userInfo(); \r\n      //Must wait for coords to get colected or it will go straight to error\r\n      await this.location.getCoords();\r\n      this.user_id = this.user.uuid;\r\n      this.userLat = this.location.currentLocation.latitude;\r\n      this.userLon = this.location.currentLocation.longitude;\r\n\r\n      //Obeservables to forkjoin\r\n    \r\n      // this.user$ = this.getData.getUser(this.user.uuid);\r\n      this.user$ = this.refresh$.pipe(switchMap(_ => this.getData.getUser(this.user.uuid)));\r\n\r\n      // this.posts$ = this.getData.getPosts(this.userLat,this.userLon, this.user.uuid);\r\n      this.posts$ = this.refresh$.pipe(switchMap(_ => this.getData.getPosts(this.userLat,this.userLon, this.user.uuid)));\r\n      // this.reactions$ = this.refresh$.pipe(switchMap(_ => this.getData.getReactions(this.user.uuid)));\r\n      // forkJoin([this.user$, this.posts$]).subscribe(results => {\r\n      //   this.loadedUser = results[0];\r\n      //   this.loadedPosts = results[1].post_list;\r\n      //   this.loadedReactions = results[1].react_list;\r\n      //   console.log(this.loadedUser);\r\n      //   console.log(this.loadedPosts);\r\n      //   console.log(this.loadedReactions);\r\n      // });\r\n    }\r\n    catch{\r\n      this.nav.navigateRoot('error');\r\n    }\r\n  }\r\n  \r\n  // Update post after getting out of comments page\r\n  ionViewWillEnter(){\r\n    this.refresh$.next(true);\r\n  }\r\n  async doRefresh($event: any) {\r\n    //Refresh Posts and Karma\r\n    setTimeout(() => {\r\n      this.refresh$.next(true);\r\n      $event.target.complete();\r\n    }, 1000);\r\n  }\r\n  //Sort segment\r\n  sortPosts(event:any){\r\n    //sort by hot\r\n    if(event.target.value == 'hot'){\r\n      this.posts$ = this.refresh$.pipe(switchMap(_ => this.getData.getPostsSorted(this.userLat,this.userLon, this.user_id)));\r\n    }\r\n    //sort by new\r\n    else if (event.target.value == 'new'){\r\n      this.posts$ = this.refresh$.pipe(switchMap(_ => this.getData.getPosts(this.userLat,this.userLon, this.user_id)));\r\n    }\r\n  }\r\n\r\n  //Route to createpost Modal\r\n  async createPost(){\r\n    let postModal = await this.modalCtrl.create({\r\n      component: CreatePostPage \r\n    })\r\n    await postModal.present();\r\n    postModal.onDidDismiss()\r\n    .then ((data)=> {\r\n      //send post request if not empty post\r\n      if(data.data != undefined){\r\n        //update location before posting\r\n        this.userLat = this.location.currentLocation.latitude;\r\n        this.userLon = this.location.currentLocation.longitude;\r\n        this.postData.createPostRequest(this.userLat, this.userLon, this.user_id, data.data.postBod).then(() =>{\r\n        this.refresh$.next(true);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  //Comments Page on tapping on post\r\n  gotToComments(post_id:number){\r\n    let navigationExtras: NavigationExtras = {\r\n      queryParams: {\r\n        post_id: JSON.stringify(post_id),\r\n      }\r\n    };\r\n    this.router.navigate(['comments'], navigationExtras);\r\n  }\r\n  ngOnDestroy() {\r\n    this.stopPolling.next();\r\n }\r\n\r\n}\r\n\r\n\r\n"]}